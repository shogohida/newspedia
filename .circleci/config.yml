version: 2.1
jobs:
  build:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: docker-compose build
          command: docker-compose build
      - run:
          name: docker-compose up
          command: docker-compose up -d
      - run:
          name: sleep for waiting launch db
          command: sleep 1
      - run:
          name: update yarn
          command: yarn install --check-files
      - run:
          name: "before_test: setup db"
          command: docker-compose run web rails db:create db:migrate
      # - run:
      #     name: test
      #     command: docker-compose run web rails test
      - run:
          name: RSpec
          command: docker-compose exec web bundle exec bin/rspec
      - run:
          name: Rubocop
          command: docker-compose exec web bundle exec rubocop
      - run:
          name: docker-compose down
          command: docker-compose down
  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      # see: https://devcenter.heroku.com/articles/container-registry-and-runtime#using-a-ci-cd-platform
      - run:
          name: "build docker image"
          command: docker build --rm=false -t registry.heroku.com/newspedia/web .
      - run:
          name: setup heroku command
          command: bash .circleci/setup_heroku.sh
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app newspedia
      - run:
          # HEROKU_AUTH_TOKEN is generated by `heroku auth:token`
          name: "push container to registry.heroku.com"
          command: |
            docker login --username=_ --password=$HEROKU_AUTH_TOKEN registry.heroku.com
            docker push registry.heroku.com/newspedia/web
      - run:
          name: heroku db migrate
          command: heroku run rails db:migrate --app newspedia
      - run:
          name: heroku maintenance off
          command: heroku maintenance:off --app newspedia
workflows:
  version: 2.1
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master


# ORIGINAL SETTING
# version: 2.1 # Use 2.1 to enable using orbs and other features.

# # Declare the orbs that we'll use in our config.
# # read more about orbs: https://circleci.com/docs/2.0/using-orbs/
# orbs:
#   ruby: circleci/ruby@1.0
#   node: circleci/node@2

# jobs:
#   build: # our first job, named "build"
#     docker:
#       - image: cimg/ruby:2.6.6-node
#       - image: circleci/ruby:2.6.6
#     steps:
#       - checkout # pull down our git code.
#       - ruby/install-deps # use the ruby orb to install dependencies
#       # use the node orb to install our packages
#       # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
#       # learn more: https://circleci.com/docs/2.0/caching/
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"

#   test:  # our next job, called "test"
#     # we run "parallel job containers" to enable speeding up our tests;
#     # this splits our tests across multiple containers.
#     parallelism: 3
#     # here we set TWO docker images.
#     docker:
#       - image: cimg/ruby:2.6.6-node # this is our primary docker image, where step commands run.
#       - image: circleci/postgres:10-alpine
#         environment: # add POSTGRES environment variables.
#           POSTGRES_USER: circleci-demo-ruby
#           POSTGRES_DB: rails_blog_test
#           POSTGRES_PASSWORD: ""
#     # environment variables specific to Ruby/Rails, applied to the primary container.
#     environment:
#       BUNDLE_JOBS: "3"
#       BUNDLE_RETRY: "3"
#       PGHOST: 127.0.0.1
#       PGUSER: circleci-demo-ruby
#       PGPASSWORD: ""
#       RAILS_ENV: test
#     # A series of steps to run, some are similar to those in "build".
#     steps:
#       - checkout
#       - ruby/install-deps
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"
#       # Here we make sure that the secondary container boots
#       # up before we run operations on the database.
#       - run:
#           name: Wait for DB
#           command: dockerize -wait tcp://localhost:5432 -timeout 1m
#       - run:
#           name: Database setup
#           command: bundle exec rails db:schema:load --trace
#       # Run rspec in parallel
#       - ruby/rspec-test

# # We use workflows to orchestrate the jobs that we declared above.
# workflows:
#   version: 2
#   build_and_test:     # The name of our workflow is "build_and_test"
#     jobs:             # The list of jobs we run as part of this workflow.
#       - build         # Run build first.
#       - test:         # Then run test,
#           requires:   # Test requires that build passes for it to run.
#             - build
